-- Criação do usuário e permissões
CREATE USER dev IDENTIFIED BY devpass;
GRANT CONNECT, RESOURCE TO dev;
ALTER USER dev QUOTA UNLIMITED ON USERS;

-- Define o schema para a sessão atual
ALTER SESSION SET CURRENT_SCHEMA = dev;

--------------------------------------------------------------------------------
-- TABELAS
--------------------------------------------------------------------------------
CREATE TABLE clientes (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nome VARCHAR2(100) NOT NULL,
    idade NUMBER
);

CREATE TABLE produtos (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nome VARCHAR2(100) NOT NULL,
    preco NUMBER(10,2) NOT NULL
);

CREATE TABLE pedidos (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    cliente_id NUMBER NOT NULL,
    produto_id NUMBER NOT NULL,
    quantidade NUMBER(5) NOT NULL,
    data_pedido DATE DEFAULT SYSDATE,
    CONSTRAINT fk_cliente FOREIGN KEY (cliente_id) REFERENCES clientes(id),
    CONSTRAINT fk_produto FOREIGN KEY (produto_id) REFERENCES produtos(id)
);

CREATE TABLE log_pedidos (
    log_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    pedido_id NUMBER,
    cliente_id NUMBER,
    produto_id NUMBER,
    quantidade NUMBER,
    data_pedido DATE,
    data_insercao_log DATE DEFAULT SYSDATE
);

--------------------------------------------------------------------------------
-- PROCEDURES
--------------------------------------------------------------------------------
CREATE OR REPLACE PROCEDURE sp_inserir_cliente (
    p_nome IN clientes.nome%TYPE,
    p_idade IN clientes.idade%TYPE
) AS
BEGIN
    INSERT INTO clientes (nome, idade)
    VALUES (p_nome, p_idade);
END;
/

CREATE OR REPLACE PROCEDURE sp_inserir_produto (
    p_nome IN produtos.nome%TYPE,
    p_preco IN produtos.preco%TYPE
) AS
BEGIN
    INSERT INTO produtos (nome, preco)
    VALUES (p_nome, p_preco);
END;
/

CREATE OR REPLACE PROCEDURE sp_criar_pedido (
    p_cliente_id IN pedidos.cliente_id%TYPE,
    p_produto_id IN pedidos.produto_id%TYPE,
    p_quantidade IN pedidos.quantidade%TYPE
) AS
BEGIN
    INSERT INTO pedidos (cliente_id, produto_id, quantidade)
    VALUES (p_cliente_id, p_produto_id, p_quantidade);
END;
/

--------------------------------------------------------------------------------
-- FUNCTIONS
--------------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION fn_obter_idade (
    p_id IN clientes.id%TYPE
)
RETURN NUMBER IS
    v_idade clientes.idade%TYPE;
BEGIN
    SELECT idade INTO v_idade
    FROM clientes
    WHERE id = p_id;
    RETURN v_idade;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN NULL;
END;
/

CREATE OR REPLACE FUNCTION fn_total_pedido (
    p_pedido_id IN pedidos.id%TYPE
)
RETURN NUMBER IS
    v_total NUMBER(10,2);
BEGIN
    SELECT p.preco * pd.quantidade
    INTO v_total
    FROM pedidos pd
    JOIN produtos p ON p.id = pd.produto_id
    WHERE pd.id = p_pedido_id;
    RETURN v_total;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN NULL;
END;
/

--------------------------------------------------------------------------------
-- TRIGGERS
--------------------------------------------------------------------------------
CREATE OR REPLACE TRIGGER trg_log_pedido
AFTER INSERT ON pedidos
FOR EACH ROW
BEGIN
    INSERT INTO log_pedidos (
        pedido_id,
        cliente_id,
        produto_id,
        quantidade,
        data_pedido
    ) VALUES (
        :NEW.id,
        :NEW.cliente_id,
        :NEW.produto_id,
        :NEW.quantidade,
        :NEW.data_pedido
    );
END;
/

--------------------------------------------------------------------------------
-- VIEWS
--------------------------------------------------------------------------------
CREATE OR REPLACE VIEW vw_total_pedidos_cliente AS
SELECT 
    c.id AS cliente_id,
    c.nome,
    COUNT(p.id) AS total_pedidos,
    SUM(fn_total_pedido(p.id)) AS valor_total_vendido
FROM clientes c
LEFT JOIN pedidos p ON p.cliente_id = c.id
GROUP BY c.id, c.nome
ORDER BY total_pedidos DESC;

CREATE OR REPLACE VIEW vw_produtos_mais_vendidos AS
SELECT 
    p.id AS produto_id,
    p.nome,
    SUM(pd.quantidade) AS total_vendido,
    SUM(pd.quantidade * p.preco) AS valor_total_vendido
FROM produtos p
LEFT JOIN pedidos pd ON pd.produto_id = p.id
GROUP BY p.id, p.nome
ORDER BY total_vendido DESC;

--------------------------------------------------------------------------------
-- DADOS INICIAIS DE TESTE
--------------------------------------------------------------------------------
BEGIN
    sp_inserir_cliente('Thales', 28);
    sp_inserir_cliente('Julio', 25);
    sp_inserir_cliente('Jonathan', 21);
    sp_inserir_cliente('Juliana', 30);
    sp_inserir_cliente('Marcia', 19);

    sp_inserir_produto('Notebook', 3500);
    sp_inserir_produto('Mouse', 120);
    sp_inserir_produto('Cadeira', 510);
    sp_inserir_produto('Cafeteira', 250);
    sp_inserir_produto('Cabo USB', 20);

    sp_criar_pedido(1, 1, 1);
    sp_criar_pedido(1, 2, 2);
    sp_criar_pedido(2, 2, 1);
    sp_criar_pedido(3, 4, 2);
    sp_criar_pedido(4, 5, 5);
    sp_criar_pedido(5, 3, 3);
    sp_criar_pedido(1, 3, 1);
END;
/
